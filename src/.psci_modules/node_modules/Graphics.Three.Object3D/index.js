"use strict";
var Data_Show = require("../Data.Show/index.js");
var Graphics_Three_Util = require("../Graphics.Three.Util/index.js");
var LineStrip = (function () {
    function LineStrip() {

    };
    LineStrip.value = new LineStrip();
    return LineStrip;
})();
var LinePieces = (function () {
    function LinePieces() {

    };
    LinePieces.value = new LinePieces();
    return LinePieces;
})();
var showLineType = {
    show: function (v) {
        if (v instanceof LineStrip) {
            return "LineStrip";
        };
        if (v instanceof LinePieces) {
            return "LinePieces";
        };
        throw new Error("Failed pattern match at Graphics.Three.Object3D (line 27, column 1 - line 29, column 35): " + [ v.constructor.name ]);
    }
};
var setRotationEuler = function (dictObject3D) {
    return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.rotation.set(x, y, z)");
};
var setPosition = function (dictObject3D) {
    return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.position.set(x, y, z)");
};
var rotateIncrement = function (dictObject3D) {
    return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.rotation.x += x; object.rotation.y += y; object.rotation.z += z;");
};
var renderableMesh = {};
var renderableLine = {};
var object3DMesh = {};
var object3DLine = {};
var getRotationEuler = function (dictObject3D) {
    return Graphics_Three_Util.ffi([ "object", "" ])("object.rotation");
};
var getPosition = function (dictObject3D) {
    return Graphics_Three_Util.ffi([ "object", "" ])("object.position");
};
var getMaterial = function (dictRenderable) {
    return function (dictMaterial) {
        return Graphics_Three_Util.ffi([ "object", "" ])("object.material");
    };
};
var getGeometry = function (dictRenderable) {
    return Graphics_Three_Util.ffi([ "object", "" ])("object.geometry");
};
var createMesh = function (dictMaterial) {
    return Graphics_Three_Util.ffi([ "geometry", "material", "" ])("new THREE.Mesh(geometry, material)");
};
var createLine = function (dictMaterial) {
    return function (g) {
        return function (m) {
            return function (t) {
                var create = Graphics_Three_Util.ffi([ "geometry", "material", "lineType", "" ])("new THREE.Line(geometry, material)");
                return create(g)(m)(Data_Show.show(showLineType)(t));
            };
        };
    };
};
module.exports = {
    LineStrip: LineStrip,
    LinePieces: LinePieces,
    createMesh: createMesh,
    createLine: createLine,
    getPosition: getPosition,
    setPosition: setPosition,
    getRotationEuler: getRotationEuler,
    setRotationEuler: setRotationEuler,
    rotateIncrement: rotateIncrement,
    getGeometry: getGeometry,
    getMaterial: getMaterial,
    object3DMesh: object3DMesh,
    object3DLine: object3DLine,
    renderableMesh: renderableMesh,
    renderableLine: renderableLine,
    showLineType: showLineType
};
