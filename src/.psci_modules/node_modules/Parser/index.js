"use strict";
var AST = require("../AST/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Show = require("../Data.Show/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_Language = require("../Text.Parsing.Parser.Language/index.js");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token/index.js");
var tokenParser = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)((function () {
    var v = Text_Parsing_Parser_Token.unGenLanguageDef(Text_Parsing_Parser_Language.emptyDef);
    return {
        commentStart: v.commentStart,
        commentEnd: v.commentEnd,
        commentLine: v.commentLine,
        nestedComments: v.nestedComments,
        identStart: v.identStart,
        identLetter: v.identLetter,
        opStart: v.opStart,
        opLetter: v.opLetter,
        reservedNames: [ "dancer", "polarGridHelper" ],
        reservedOpNames: [ ";" ],
        caseSensitive: v.caseSensitive
    };
})());
var whiteSpace = tokenParser.whiteSpace;
var symbol = tokenParser.symbol;
var stringLiteral = tokenParser.stringLiteral;
var showParseError = function (v) {
    return Data_Show.show(Data_Show.showInt)(v.value1.line) + (":" + (Data_Show.show(Data_Show.showInt)(v.value1.column) + (" " + v.value0)));
};
var semiSep1 = tokenParser.semiSep1;
var semiSep = tokenParser.semiSep;
var semi = tokenParser.semi;
var reservedOp = tokenParser.reservedOp;
var reserved = tokenParser.reserved;
var parens = tokenParser.parens;
var operator = tokenParser.operator;
var octal = tokenParser.octal;
var naturalOrFloat = tokenParser.naturalOrFloat;
var natural = tokenParser.natural;
var lexeme = tokenParser.lexeme;
var integer = tokenParser.integer;
var identifier = tokenParser.identifier;
var hexadecimal = tokenParser.hexadecimal;
var $$float = tokenParser["float"];
var ethereal = Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(reserved("polarGridHelper"))(AST.defaultEthereal);
var dot = tokenParser.dot;
var decimal = tokenParser.decimal;
var dancer = Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(reserved("dancer"))(AST.defaultDancer);
var element = Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Dancer.create)(dancer), Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Ethereal.create)(ethereal) ]);
var statement = Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Element.create)(element) ]);
var program = Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(statement)(reservedOp(";"));
var parseProgram = function (x) {
    var v = Text_Parsing_Parser.runParser(x)(program);
    if (v instanceof Data_Either.Left) {
        return Data_Either.Left.create(showParseError(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        return new Data_Either.Right(v.value0);
    };
    throw new Error("Failed pattern match at Parser (line 20, column 18 - line 22, column 27): " + [ v.constructor.name ]);
};
var commaSep1 = tokenParser.commaSep1;
var commaSep = tokenParser.commaSep;
var comma = tokenParser.comma;
var colon = tokenParser.colon;
var charLiteral = tokenParser.charLiteral;
var brackets = tokenParser.brackets;
var braces = tokenParser.braces;
var angles = tokenParser.angles;
module.exports = {
    parseProgram: parseProgram
};
