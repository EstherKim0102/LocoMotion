"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");
var Parser = require("../Parser/index.js");
var RenderEngine = require("../RenderEngine/index.js");
var TextChanged = (function () {
    function TextChanged(value0) {
        this.value0 = value0;
    };
    TextChanged.create = function (value0) {
        return new TextChanged(value0);
    };
    return TextChanged;
})();
var Evaluate = (function () {
    function Evaluate() {

    };
    Evaluate.value = new Evaluate();
    return Evaluate;
})();
var render = function (st) {
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("editorAndStatus") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("editor") ])([ Halogen_HTML_Elements.textarea([ Halogen_HTML_Properties.class_("editorArea"), Halogen_HTML_Events.onValueInput(TextChanged.create) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("status") ])([ Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
        return Evaluate.value;
    }) ])([ Halogen_HTML_Core.text("eval") ]), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("errors") ])([ Halogen_HTML_Core.text(st.status) ]) ]) ]);
};
var initialState = function (v) {
    return {
        text: "",
        status: ""
    };
};
var handleAction = function (dictMonadEffect) {
    return function (re) {
        return function (ea) {
            if (ea instanceof TextChanged) {
                return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                    var $10 = {};
                    for (var $11 in st) {
                        if ({}.hasOwnProperty.call(st, $11)) {
                            $10[$11] = st[$11];
                        };
                    };
                    $10.text = ea.value0;
                    return $10;
                });
            };
            if (ea instanceof Evaluate) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (st) {
                    var v = Parser.parseProgram(st.text);
                    if (v instanceof Data_Either.Right) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(RenderEngine.setProgram(re)(v.value0)))(function () {
                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                var $15 = {};
                                for (var $16 in v1) {
                                    if ({}.hasOwnProperty.call(v1, $16)) {
                                        $15[$16] = v1[$16];
                                    };
                                };
                                $15.status = "success!";
                                return $15;
                            });
                        });
                    };
                    if (v instanceof Data_Either.Left) {
                        return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                            var $19 = {};
                            for (var $20 in v1) {
                                if ({}.hasOwnProperty.call(v1, $20)) {
                                    $19[$20] = v1[$20];
                                };
                            };
                            $19.status = "syntax: " + v.value0;
                            return $19;
                        });
                    };
                    throw new Error("Failed pattern match at Main (line 49, column 5 - line 53, column 61): " + [ v.constructor.name ]);
                });
            };
            throw new Error("Failed pattern match at Main (line 45, column 22 - line 53, column 61): " + [ ea.constructor.name ]);
        };
    };
};
var component = function (dictMonadEffect) {
    return function (re) {
        return Halogen_Component.mkComponent({
            initialState: initialState,
            render: render,
            "eval": Halogen_Component.mkEval({
                handleAction: handleAction(dictMonadEffect)(re),
                handleQuery: Halogen_Component.defaultEval.handleQuery,
                receive: Halogen_Component.defaultEval.receive,
                initialize: Halogen_Component.defaultEval.initialize,
                finalize: Halogen_Component.defaultEval.finalize
            })
        });
    };
};
var main = function __do() {
    Effect_Console.log("untitled NFRF project")();
    var re = RenderEngine.launchRenderEngine();
    return Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (body) {
        return Halogen_VDom_Driver.runUI(component(Effect_Aff.monadEffectAff)(re))(Data_Unit.unit)(body);
    }))();
};
module.exports = {
    initialState: initialState,
    TextChanged: TextChanged,
    Evaluate: Evaluate,
    render: render,
    handleAction: handleAction,
    component: component,
    main: main
};
