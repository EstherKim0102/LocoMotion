"use strict";
var Graphics_Three_Util = require("../Graphics.Three.Util/index.js");

//TODO Combined camera
var Perspective = (function () {
    function Perspective() {

    };
    Perspective.value = new Perspective();
    return Perspective;
})();

//TODO Combined camera
var Orthographic = (function () {
    function Orthographic() {

    };
    Orthographic.value = new Orthographic();
    return Orthographic;
})();
var PerspectiveInstance = (function () {
    function PerspectiveInstance(value0) {
        this.value0 = value0;
    };
    PerspectiveInstance.create = function (value0) {
        return new PerspectiveInstance(value0);
    };
    return PerspectiveInstance;
})();
var OrthographicInstance = (function () {
    function OrthographicInstance(value0) {
        this.value0 = value0;
    };
    OrthographicInstance.create = function (value0) {
        return new OrthographicInstance(value0);
    };
    return OrthographicInstance;
})();
var updateProjectionMatrix = function (dictCamera) {
    return Graphics_Three_Util.fpi([ "camera", "" ])("camera.updateProjectionMatrix()");
};
var updateOrthographic = Graphics_Three_Util.fpi([ "camera", "left", "right", "top", "bottom", "" ])("  camera.left   = left;\x0a         camera.right  = right;\x0a         camera.top    = top;\x0a         camera.bottom = bottom;\x0a    ");
var unproject = function (dictCamera) {
    return Graphics_Three_Util.ffi([ "camera", "vector", "" ])("vector.unproject(camera)");
};
var setAspect = Graphics_Three_Util.fpi([ "camera", "aspect", "" ])("camera.aspect = aspect");
var object3DPerspectiveCamera = {};
var object3DOrthographicCamera = {};
var getType = function (dictCamera) {
    return function (camera) {
        return Graphics_Three_Util.ffi([ "camera", "" ])("camera.type");
    };
};
var createPerspective = Graphics_Three_Util.ffi([ "fov", "aspect", "near", "far", "" ])("new THREE.PerspectiveCamera(fov, aspect, near, far)");
var createOrthographic = Graphics_Three_Util.ffi([ "left", "right", "top", "bottom", "near", "far", "" ])("new THREE.OrthographicCamera(left, right, top, bottom, near, far)");
var cameraPerspective = {};
var cameraOrthographic = {};
module.exports = {
    Perspective: Perspective,
    Orthographic: Orthographic,
    PerspectiveInstance: PerspectiveInstance,
    OrthographicInstance: OrthographicInstance,
    unproject: unproject,
    updateProjectionMatrix: updateProjectionMatrix,
    createOrthographic: createOrthographic,
    createPerspective: createPerspective,
    getType: getType,
    setAspect: setAspect,
    updateOrthographic: updateOrthographic,
    cameraOrthographic: cameraOrthographic,
    cameraPerspective: cameraPerspective,
    object3DOrthographicCamera: object3DOrthographicCamera,
    object3DPerspectiveCamera: object3DPerspectiveCamera
};
