"use strict";
var AST = require("../AST/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Foreign_EasyFFI = require("../Data.Foreign.EasyFFI/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Graphics_Three_Camera = require("../Graphics.Three.Camera/index.js");
var Graphics_Three_Geometry = require("../Graphics.Three.Geometry/index.js");
var Graphics_Three_Material = require("../Graphics.Three.Material/index.js");
var Graphics_Three_Object3D = require("../Graphics.Three.Object3D/index.js");
var Graphics_Three_Renderer = require("../Graphics.Three.Renderer/index.js");
var Graphics_Three_Scene = require("../Graphics.Three.Scene/index.js");
var setProgram = function (re) {
    return function (p) {
        return Effect_Ref.write(p)(re.programRef);
    };
};
var runDancer = function (v) {
    return function (v1) {
        return function (dState) {
            return Control_Applicative.pure(Effect.applicativeEffect)(dState);
        };
    };
};
var requestAnimationFrame = Data_Foreign_EasyFFI.unsafeForeignProcedure([ "callback", "" ])("window.requestAnimationFrame(callback)");
var defaultRenderState = {
    dancers: [  ],
    ethereals: [  ]
};
var addDancer = function (re) {
    return function (v) {
        return function __do() {
            var geometry = Graphics_Three_Geometry.createBox(1.0)(1.0)(1.0)();
            var material = Graphics_Three_Material.createMeshBasic({
                color: "red"
            })();
            var mesh = Graphics_Three_Object3D.createMesh()(geometry)(material)();
            Graphics_Three_Scene.addObject()(re.scene)(mesh)();
            return {
                mesh: mesh
            };
        };
    };
};
var runDancers = function (v) {
    return function (v1) {
        return function (dsNew) {
            return function (v2) {
                if (v2 instanceof AST.Element && v2.value0 instanceof AST.Dancer) {
                    return function __do() {
                        var x = (function () {
                            var v3 = Data_Array.index(v1)(Data_Array.length(dsNew));
                            if (v3 instanceof Data_Maybe.Just) {
                                return runDancer(v)(v2.value0.value0)(v3.value0)();
                            };
                            if (v3 instanceof Data_Maybe.Nothing) {
                                return addDancer(v)(v2.value0.value0)();
                            };
                            throw new Error("Failed pattern match at RenderEngine (line 98, column 8 - line 100, column 30): " + [ v3.constructor.name ]);
                        })();
                        return Data_Array.snoc(dsNew)(x);
                    };
                };
                return Control_Applicative.pure(Effect.applicativeEffect)(dsNew);
            };
        };
    };
};
var runProgram = function (re) {
    return function __do() {
        var p = Effect_Ref.read(re.programRef)();
        var rState = Effect_Ref.read(re.renderState)();
        var ds = Data_Foldable.foldM(Data_List_Types.foldableList)(Effect.monadEffect)(runDancers(re)(rState.dancers))([  ])(p)();
        return Effect_Ref.write({
            dancers: ds,
            ethereals: rState.ethereals
        })(re.renderState)();
    };
};
var animate = function (re) {
    return function __do() {
        runProgram(re)();
        Graphics_Three_Renderer.render()(re.renderer)(re.scene)(re.camera)();
        return requestAnimationFrame(animate(re))();
    };
};
var launchRenderEngine = function __do() {
    var scene = Graphics_Three_Scene.create();
    var camera = Graphics_Three_Camera.createPerspective(75.0)(16.0 / 9.0)(0.1)(100.0)();
    var renderer = Graphics_Three_Renderer.createWebGL({
        antialias: true
    })();
    Graphics_Three_Renderer.setSize(renderer)(400.0)(400.0)();
    Graphics_Three_Renderer.appendToDomByID(renderer)("canvas")();
    Graphics_Three_Object3D.setPosition()(camera)(0.0)(0.0)(5.0)();
    var programRef = Effect_Ref["new"](AST.defaultProgram)();
    var renderState = Effect_Ref["new"](defaultRenderState)();
    var re = {
        scene: scene,
        camera: camera,
        renderer: renderer,
        programRef: programRef,
        renderState: renderState
    };
    requestAnimationFrame(animate(re))();
    return re;
};
module.exports = {
    launchRenderEngine: launchRenderEngine,
    setProgram: setProgram
};
